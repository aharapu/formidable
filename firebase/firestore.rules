rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isCompleteUserDocument() {
      return (request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt', 'updatedAt'])) &&
        (request.resource.data.keys().hasOnly(['email', 'displayName', 'createdAt', 'updatedAt']));
    }

    function allUserDataTypesAreValid(data) {
      return data.displayName is string &&
        data.email is string &&
        data.createdAt is timestamp &&
        data.updatedAt is timestamp;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function resuorceIdAndUserIdMatch() {
      return request.auth.uid == request.resource.id;
    }

    // TODO --> add type validation
    // https://firebase.google.com/docs/firestore/security/rules-fields?authuser=0
    // TODO -> use this for updates
    // Allow a client to update only these 6 fields in a document
    // allow update: if (request.resource.data.diff(resource.data).affectedKeys()
    // .hasOnly(['name', 'location', 'city', 'address', 'hours', 'cuisine']));

  	match /users/{userId} {
      allow create: if
        isAuthenticated() &&
        resuorceIdAndUserIdMatch() &&
        isCompleteUserDocument() &&
        allUserDataTypesAreValid(request.resource.data);
    }

    match /users/{userId} {
      allow read: if request.auth != null && resource != null && request.auth.uid == resource.id;
    }

    match /form_types/{formTypeId} {
      allow read: if true;
    }

  	match /input_types/{inputId} {
      allow read: if true;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
